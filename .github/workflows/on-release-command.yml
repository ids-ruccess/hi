# .github/workflows/on-release-command.yml
name: "🚀 Release on Slash-Command"

on:
  issue_comment:
    types: [created]

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      # ── 0) GH CLI로 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3

      # ── 1) PR인지, base가 main인지, /release 커맨드인지 검사
      - name: Validate PR, Base Branch, and Command
        id: validate
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            if (!issue.pull_request) {
              core.info("Not a PR comment → skipping");
              return;
            }
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              pull_number: issue.number
            });
            if (pr.data.base.ref !== 'main') {
              core.info(`Base branch is '${pr.data.base.ref}' (not 'main') → skipping`);
              return;
            }
            const comment = context.payload.comment.body.trim();
            if (!comment.startsWith('/release ')) {
              core.info("Comment does not start with '/release ' → skipping");
              return;
            }
            const version = comment.substring('/release '.length).trim();
            core.setOutput("version", version);

      # ── 2) validate 단계에서 버전이 없으면 종료
      - name: Abort if not valid
        if: steps.validate.outputs.version == ''
        run: exit 0

      # ── 3) 태그 생성 & 푸시
      - name: Create Tag & Push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag "v${{ steps.validate.outputs.version }}"
          git push origin "v${{ steps.validate.outputs.version }}"

      # ── 4) Draft Release Notes 작성
      - name: Draft Release Notes
        id: drafter
        uses: release-drafter/release-drafter@v5
        with:
          config-name: .github/release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ── 5) 정식 릴리즈 생성
      - name: Publish Release
        uses: actions/create-release@v1
        with:
          tag_name: "v${{ steps.validate.outputs.version }}"
          release_name: "v${{ steps.validate.outputs.version }}"
          draft: false
          body: ${{ steps.drafter.outputs.notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
