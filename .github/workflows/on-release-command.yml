# .github/workflows/on-release-command.yml
name: "🚀 Release on Slash-Command"

on:
  issue_comment:
    types: [created]

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}

    steps:
      # 1) PR인지·base가 main인지·명령어 파싱
      - name: Validate & extract `/release` params
        id: validate
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { issue, comment } = context.payload;
            // PR 여부
            if (!issue.pull_request) return;
            // PR 상세
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: issue.number
            });
            if (pr.data.base.ref !== "main") return;
            const body = comment.body.trim();
            if (!body.startsWith("/release ")) return;
            // -v 버전
            const vMatch = body.match(/-v\s+(\S+)/);
            if (!vMatch) return;
            const version = vMatch[1];
            // -d 설명 (백틱 내부)
            const dMatch = body.match(/-d\s+`([\s\S]+?)`/);
            const description = dMatch ? dMatch[1] : "";
            core.setOutput("version", version);
            core.setOutput("description", description);

      # 2) version이 없으면 종료
      - name: Abort if no version
        if: steps.validate.outputs.version == ''
        run: exit 0

      # 3) 릴리즈 준비중 코멘트
      - name: Comment “작성중” on PR
        if: steps.validate.outputs.version != ''
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `📝 릴리즈 노트 작성중입니다…\nv${{ steps.validate.outputs.version }}`
            });

      # 4) 코드 체크아웃 (git tag, delete tag 용)
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main

      # 5) 태그 생성 & 푸시 (오류 나도 계속)
      - name: Create Tag & Push
        id: push_tag
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag "v${{ steps.validate.outputs.version }}"
          git push origin "v${{ steps.validate.outputs.version }}"

      # 6) Draft Release Notes (continue-on-error)
      - name: Draft Release Notes
        id: drafter
        continue-on-error: true
        uses: release-drafter/release-drafter@v5
        with:
          config-name: release.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 7) Publish Release (continue-on-error)
      - name: Publish Release
        id: publish_release
        continue-on-error: true
        uses: actions/create-release@v1
        with:
          tag_name: "v${{ steps.validate.outputs.version }}"
          release_name: "v${{ steps.validate.outputs.version }}"
          draft: false
          body: |
            ${{ steps.validate.outputs.description }}

            ${{ steps.drafter.outputs.notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 8) 성공 코멘트
      - name: Comment Success on PR
        if: steps.validate.outputs.version != '' && steps.publish_release.outcome == 'success'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `✅ 릴리즈 v${{ steps.validate.outputs.version }} 작성 완료!`
            });

      # 9) 실패 코멘트 & 태그 삭제
      - name: Comment Failure & Cleanup Tag
        if: steps.validate.outputs.version != '' && steps.publish_release.outcome == 'failure'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 태그 삭제 시도
          git push origin --delete "v${{ steps.validate.outputs.version }}" || true
        shell: bash
      - name: Post Failure Comment
        if: steps.validate.outputs.version != '' && steps.publish_release.outcome == 'failure'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `❌ 릴리즈 v${{ steps.validate.outputs.version }} 작성에 실패했습니다. 다시 시도해주세요.`
            });
