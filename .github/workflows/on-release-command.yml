# .github/workflows/on-release-command.yml
name: "🚀 Release on Slash-Command"

on:
  issue_comment:
    types: [created]

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
      # 1) /release -v <ver> -d `<desc>` 파싱 & 유효성 검사
      - name: Validate & extract `/release` params
        id: validate
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { issue, comment } = context.payload;
            if (!issue.pull_request) return;
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              pull_number: issue.number
            });
            if (pr.data.base.ref !== 'main') return;
            const b = comment.body.trim();
            if (!b.startsWith('/release ')) return;
            const vm = b.match(/-v\s+(\S+)/);
            if (!vm) return;
            const version = vm[1];
            const dm = b.match(/-d\s+`([\s\S]+?)`/);
            const description = dm ? dm[1] : '';
            core.setOutput('version', version);
            core.setOutput('description', description);

      # 2) 버전 없으면 종료
      - name: Abort if no version
        if: steps.validate.outputs.version == ''
        run: exit 0

      # 3) PR에 “작성중” 코멘트
      - name: Comment “작성중” on PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `📝 릴리즈 노트 작성중… v${{ steps.validate.outputs.version }}`
            });

      # 4) main 브랜치 체크아웃
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main

      # 5) 태그 생성 & 푸시
      - name: Create Tag & Push
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag "v${{ steps.validate.outputs.version }}"
          git push origin "v${{ steps.validate.outputs.version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 6) Draft 생성/업데이트
      - name: Draft Release Notes
        uses: release-drafter/release-drafter@v5
        with:
          config-name: release.yml
          version: ${{ steps.validate.outputs.version }}
          name:    "릴리즈 v${{ steps.validate.outputs.version }}"
          tag:     "v${{ steps.validate.outputs.version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 7) Draft 퍼블리시
      - name: Publish the draft
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = `v${{ steps.validate.outputs.version }}`;
            const drafts = (await github.rest.repos.listReleases({
              owner: context.repo.owner, repo: context.repo.repo
            })).data.filter(r => r.tag_name === tag && r.draft);
            if (!drafts.length) throw new Error(`Draft ${ tag } not found`);
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: drafts[0].id,
              draft: false
            });

      # 8) 성공 코멘트
      - name: Comment Success on PR
        if: steps.publish.conclusion == 'success'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `✅ 릴리즈 v${{ steps.validate.outputs.version }} 완료되었습니다!`
            });

      # 9) 실패 시 태그 삭제 & 실패 코멘트
      - name: Cleanup Tag & Comment Failure
        if: steps.publish.conclusion != 'success'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              await github.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/v${{ steps.validate.outputs.version }}`
              });
            } catch {}
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `❌ 릴리즈 v${{ steps.validate.outputs.version }} 실패했습니다.`
            });
